遇到的问题：
	1) 限制登录的用户输入为4-12位字符和数字的组合；
	2) 限制密码位数为6-20位，不限制字符；

ps:
	简单的正则表达式技能;
	a) 首尾限制为4-12字母或数字：'^[a-z0-9]{4,12}$'---用户填写限制
	b) 首尾限制为6-20位任意字符：'^.{6,20}$'---密码填写限制

解决的方法：
	a) 使用django.core.validators中的 RegexValidtor

		在app文件中新建的form.py：
		
			from django.core.validators import RegexValidator

			class yourForm(forms.Form):
		    ''' 
			    注册表单
		    '''
		    	yourname = forms.CharField(
								#输入框中的内容显示，并指定该text文本框不能为空
                                widget=forms.TextInput(attrs={"placeholder": "Username, 4-12", "required": "required",}),
								#显示不满足输入框内容时，提示信息
                                error_messages={"required": "username不能为空",},
								#用户限制
								validators=[RegexValidator(regex=r'^[a-z0-9]{4,12}$', message='账户为4-12位字母或数字组成，请确认！', code='nomatch')],)
								#密码限制
								#validators=[RegexValidator(regex=r'^.{6,20}$', message='密码为6-20位任意字符（enter除外），请确认！', code='nomatch')],)
		
	b) 利用forms中的ValidationError，可以自定义返回相应的错误信息。

		在app文件中新建的form.py：
		
			from django.core.exceptions import ValidationError

			def validate_user(value):
			'''
				自定义填写文本验证方法
			'''
				#用户限制
				reg = re.compile(r'^[a-z0-9]{4,12}$')
				#密码限制
				#reg = re.compile(r'^.{6,20}$')
				if str(reg.match(value))=="None":
					#用户填写错误提示
					raise ValidationError(u'%s 账户为4-12位字母或数字组成，请确认！' % value)
					#密码填写错误提示
					#raise ValidationError(u'%s 账户为6-20位任意字符（enter除外），请确认！' % value)

			class yourForm(forms.Form):
		    ''' 
			    注册表单
		    '''
		    	yourname = forms.CharField(
								#输入框中的内容显示，并指定该text文本框不能为空
                                widget=forms.TextInput(attrs={"placeholder": "Username, 4-12", "required": "required",}),
								#显示不满足输入框内容时，提示信息
                                error_messages={"required": "username不能为空",},
								#用户限制
								validators=[validate_user],)
