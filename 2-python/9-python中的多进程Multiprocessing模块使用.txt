参考博客：
	http://www.cnblogs.com/kaituorensheng/p/4445418.html

1. 学习Python多进程编程-multiprocessing模块

	a) Process

		1) 作用-创建进程的类

		2）参数-__init__(self, group=None, target=None, name=None, args=(), kwargs={})

			group: 基本不使用;
			
			target:表示调用对象-子进程去执行哪个对象;

			name:  别名-为创建的进程起别名;

			args:  表示调用对象的位置参数元组-传入调用对象的可变长参数;

			kwargs:表示调用对象的字典-传入调用对象的可变长字典参数;

		3) 方法

			start:		Start child process-子进程开始工作;

			is_alive:	Return whether process is alive-子进程是否还存活:

			join:		Wait until child process terminates-子进程执行结束后，和主进程进行同步;

			run:		Method to be run in sub-process; can be overridden in sub-class-子进程执行, 调用start方法，默认执行run，子类可以覆盖该run方法; 

			terminate:	Terminate process-停止子进程的执行;

		4) 属性 

			authkey:	认证号，返回的不知道是啥...一般不用，忽略不计。

			daemon:		Return whether process is a daemo-父进程终止后自动终止，且自己不能产生新进程，必须在start()之前设置;

			exitcode:	Return exit code of process or `None` if it has yet to stop-子进程在运行时为None、返回值为为N，表示被信号N结束;

			ident:		Return identifier (PID) of process or `None` if it has yet to start-返回子进程的PID号，和pid属性一致;

			name:		返回子进程的名字, 和传入Process的参数值一致;

			pid:		Return identifier (PID) of process or `None` if it has yet to start-返回子进程的PID号;

    b) Lock

		1) 作用-当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。

		2) 参数-无

		3) 方法

			acquire:	

			release:	释放一个Lock

		4) 代码分析	

			import multiprocessing
			import sys

			def worker_with(lock, f):
				with lock:
					fs = open(f, 'a+')
					n = 10
					while n > 1:
						fs.write("Lockd acquired via with\n")
						n -= 1
					fs.close()
        
			def worker_no_with(lock, f):
				lock.acquire()
				try:
					fs = open(f, 'a+')
					n = 10
					while n > 1:
						fs.write("Lock acquired directly\n")
						n -= 1
					fs.close()
				finally:
					lock.release()
    
			if __name__ == "__main__":
				lock = multiprocessing.Lock()
				f = "file.txt"
				w = multiprocessing.Process(target = worker_with, args=(lock, f))
				nw = multiprocessing.Process(target = worker_no_with, args=(lock, f))
				w.start()
				nw.start()
				print "end"

			https://segmentfault.com/a/1190000008123688

    c) Semaphore

		1) 作用-用来控制对共享资源的访问数量，例如池的最大连接数。

		2) 参数-无

		3) 方法

			acquire:

			release:

		4) 代码分析

			import multiprocessing
			import time

			def worker(s, i):
				s.acquire()
				print(multiprocessing.current_process().name + "acquire");
				time.sleep(i)
				print(multiprocessing.current_process().name + "release\n");
				s.release()

			if __name__ == "__main__":
				s = multiprocessing.Semaphore(2)
				for i in range(5):
					p = multiprocessing.Process(target = worker, args=(s, i*2))
					p.start()

    d) Event
		1) 作用-用来实现进程间同步通信。

		2) 参数-无

		3) 方法

			clear

			is_set

			set

			wait

		4) 代码分析

			import multiprocessing
			import time

			def wait_for_event(e):
				print("wait_for_event: starting")
				e.wait()
				print("wairt_for_event: e.is_set()->" + str(e.is_set()))

			def wait_for_event_timeout(e, t):
				print("wait_for_event_timeout:starting")
				e.wait(t)
				print("wait_for_event_timeout:e.is_set->" + str(e.is_set()))

			if __name__ == "__main__":
				e = multiprocessing.Event()
				w1 = multiprocessing.Process(name = "block", target = wait_for_event, args = (e,))
				w2 = multiprocessing.Process(name = "non-block", target = wait_for_event_timeout, args = (e, 2))
				w1.start()
				w2.start()
				time.sleep(3)
				e.set()
				print("main: event is set")

    e) Queue

    f) Pipe

    g) Pool
