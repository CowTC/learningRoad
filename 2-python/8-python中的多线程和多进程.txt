1. 进程-作为分配资源的基本单位

	a) 什么是资源呢? 

		就是内存，文件，socket等，比如你new了一块内存，就是操作系统将一块物理内存映射到你的进程地址空间上，这块内存就是属于你这个进程的，你进程内的所有线程都可以访问这块内存，其他进程就访问不了.

	b) 其他类型的资源。

		所以进程是分配资源的基本单位（而不是线程，因为同一个进程内的所有线程都可以访问这些资源）

2. 线程-作为独立运行和独立调度的基本单位

	线程是怎么运行和调度的呢?

	a) 先说运行，线程的运行状态是通过CPU寄存器表示的（不太严谨的说），几个比较重要的是：

		ip，表示下一条要执行的指令相对于当前段的偏移量;

		cs，表示当前代码段的信息，那么cs:ip就表示下一条指令的绝对地址;

		ss，表示堆栈的基地址，通过这个可以知道当前的调用栈是什么情况;

		sp、bp，表示当前栈帧的栈顶和栈基地址，所有临时变量都分配在栈上也就是这里，还有一大堆通用寄存器就不详细说了。

		通过这些寄存器我们可以知道:
			1、当前运行到什么地方了，下一步要做什么；

			2、函数的调用栈，现在运行在哪个函数里面，这个函数又是在哪个函数里面，函数调用完成后应该返回到哪里等。

	线程的运行就是cpu一条一条的执行指令（ip一条一条的变化），随着函数的调用和返回，堆栈在增长和减少（sp、bp在变化）

	b) 再说调度，如果前面说的明白了，那么调度就是把某个线程对应的这套寄存器换出去，换另一套进来，这就是暂停一个线程，继续另一个线程的过程。

		每一个线程对应着一套这样的寄存器（书上应该是叫xx控制块之类的），哪个线程的寄存器在cpu上，哪个线程就是在干活（运行），其他的就在候着，直到被换进来（调度）.

		因此我们说运行和调度都是指线程，进程只是给线程提供了场地和资源。

3. 综合形象的解释-http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html：
	
	a) 计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。

	b) 假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。

	c) 进程就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。

	d) 一个车间里，可以有很多工人。他们协同完成一个任务。线程就好比车间里的工人。一个进程可以包括多个线程。

	e) 车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。

	f) 可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。

	g) 一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫"互斥锁"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。

	h) 还有些房间，可以同时容纳n个人，比如厨房。也就是说，如果人数大于n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做"信号量"（Semaphore），用来保证多个线程不会互相冲突。不难看出，mutex是semaphore的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。

	i) 操作系统的设计，因此可以归结为三点：

		1) 以多进程形式，允许多个任务同时运行；

		2) 以多线程形式，允许单个任务分成不同的部分运行；

		3) 提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。

4. Python中的多线程和多进程。

	a) GIL是Global Interpreter Lock的缩写, 是Python解释器的一个全局锁。

	b) 它的产生是由于Python解释器在实现的时候作者为了“糙快猛”地实现出一个原型引入了很多全局变量，由于全局变量的存在就要加锁，为了加锁那干脆一不做二不休，加了个全局锁。后来Python逐渐流行起来，很多模块的作者一方面也是为了简化问题，另一方面也是由于Python解释器 本身就有GIL，很多模块自己也肆无忌惮地引入了很多全局变量。从此Python的GIL就走上了一条不归路，对Python程序员的影响就是，Python的多线程在同一时刻 只能有一个线程在运行。多线程情况下就是线程不停地在抢锁，抢得头破血流。

	c) 关于Python的GIL及其造成的性能影响，这篇David Beazley的这篇文章做了非常深刻的论述：http://blog.51reboot.com/global-interpretor-lock/


	d) 我们可以得到的结论：

		1) Python的多线程对CPU密集型是反作用，对IO密集型可以采用;

		2) Python多进程能充分利用多核CPU;
